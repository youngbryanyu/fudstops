import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["propsToForward", "rootStateClasses", "inputStateClasses", "getRootProps", "getInputProps", "component", "componentsProps", "formControl", "focused", "error", "disabled", "size", "color", "variant", "startDecorator", "endDecorator", "minRows", "maxRows"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_capitalize as capitalize } from '@mui/utils';
import { useSlotProps } from '@mui/base/utils';
import composeClasses from '@mui/base/composeClasses';
import TextareaAutosize from '@mui/base/TextareaAutosize';
import { styled, useThemeProps } from '../styles';
import textareaClasses, { getTextareaUtilityClass } from './textareaClasses';
import useForwardedInput from '../Input/useForwardedInput';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

const useUtilityClasses = ownerState => {
  const {
    disabled,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    textarea: ['textarea'],
    startDecorator: ['startDecorator'],
    endDecorator: ['endDecorator']
  };
  return composeClasses(slots, getTextareaUtilityClass, {});
};

const TextareaRoot = styled('div', {
  name: 'JoyTextarea',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _variantStyle$backgro, _theme$variants2, _theme$variants3;

  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    '--Textarea-radius': theme.vars.radius.sm,
    '--Textarea-gap': '0.5rem',
    '--Textarea-placeholderOpacity': 0.5,
    '--Textarea-focusedThickness': theme.vars.focus.thickness
  }, ownerState.color === 'context' ? {
    '--Textarea-focusedHighlight': theme.vars.palette.focusVisible
  } : {
    '--Textarea-focusedHighlight': (_theme$vars$palette = theme.vars.palette[ownerState.color === 'neutral' ? 'primary' : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, ownerState.size === 'sm' && {
    '--Textarea-minHeight': '2rem',
    '--Textarea-paddingBlock': 'calc(0.5rem - var(--variant-borderWidth, 0px))',
    // to match Input because <textarea> does not center the text at the middle like <input>
    '--Textarea-paddingInline': '0.5rem',
    '--Textarea-decorator-childHeight': 'min(1.5rem, var(--Textarea-minHeight))',
    '--Icon-fontSize': '1.25rem'
  }, ownerState.size === 'md' && {
    '--Textarea-minHeight': '2.5rem',
    '--Textarea-paddingBlock': 'calc(0.5rem - var(--variant-borderWidth, 0px))',
    '--Textarea-paddingInline': '0.75rem',
    '--Textarea-decorator-childHeight': 'min(2rem, var(--Textarea-minHeight))',
    '--Icon-fontSize': '1.5rem'
  }, ownerState.size === 'lg' && {
    '--Textarea-minHeight': '3rem',
    '--Textarea-paddingBlock': 'calc(0.75rem - var(--variant-borderWidth, 0px))',
    '--Textarea-paddingInline': '1rem',
    '--Textarea-gap': '0.75rem',
    '--Textarea-decorator-childHeight': 'min(2.375rem, var(--Textarea-minHeight))',
    '--Icon-fontSize': '1.75rem'
  }, {
    // variables for controlling child components
    '--internal-paddingBlock': 'max((var(--Textarea-minHeight) - 2 * var(--variant-borderWidth) - var(--Textarea-decorator-childHeight)) / 2, 0px)',
    '--Textarea-decorator-childRadius': 'max(var(--Textarea-radius) - var(--internal-paddingBlock), min(var(--internal-paddingBlock) / 2, var(--Textarea-radius) / 2))',
    '--Button-minHeight': 'var(--Textarea-decorator-childHeight)',
    '--IconButton-size': 'var(--Textarea-decorator-childHeight)',
    '--Button-radius': 'var(--Textarea-decorator-childRadius)',
    '--IconButton-radius': 'var(--Textarea-decorator-childRadius)',
    boxSizing: 'border-box',
    minWidth: 0,
    minHeight: 'var(--Textarea-minHeight)',
    cursor: 'text',
    position: 'relative',
    display: 'flex',
    flexDirection: 'column',
    paddingInlineStart: `var(--Textarea-paddingInline)`,
    // the paddingInlineEnd is added to the textarea. It looks better when the scrollbar appears.
    paddingBlock: 'var(--Textarea-paddingBlock)',
    borderRadius: 'var(--Textarea-radius)',
    fontFamily: theme.vars.fontFamily.body,
    fontSize: theme.vars.fontSize.md,
    lineHeight: theme.vars.lineHeight.md
  }, ownerState.size === 'sm' && {
    fontSize: theme.vars.fontSize.sm,
    lineHeight: theme.vars.lineHeight.sm
  }, {
    // TODO: discuss the transition approach in a separate PR. This value is copied from mui-material Button.
    transition: 'border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    '&:before': {
      boxSizing: 'border-box',
      content: '""',
      display: 'block',
      position: 'absolute',
      pointerEvents: 'none',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: 'inherit',
      margin: 'calc(var(--variant-borderWidth) * -1)' // for outlined variant

    }
  }), _extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
    [`&:hover:not(.${textareaClasses.focused})`]: _extends({}, (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color], {
      backgroundColor: null,
      // it is not common to change background on hover for Input
      cursor: 'text'
    }),
    [`&.${textareaClasses.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color],
    [`&.${textareaClasses.focused}`]: {
      '&:before': {
        boxShadow: `inset 0 0 0 var(--Textarea-focusedThickness) var(--Textarea-focusedHighlight)`
      }
    }
  })];
});
const TextareaInput = styled(TextareaAutosize, {
  name: 'JoyTextarea',
  slot: 'Textarea',
  overridesResolver: (props, styles) => styles.textarea
})({
  resize: 'none',
  border: 'none',
  // remove the native textarea width
  minWidth: 0,
  // remove the native textarea width
  outline: 0,
  // remove the native textarea outline
  padding: 0,
  // remove the native textarea padding
  paddingInlineEnd: `var(--Textarea-paddingInline)`,
  flex: 'auto',
  alignSelf: 'stretch',
  color: 'inherit',
  backgroundColor: 'transparent',
  fontFamily: 'inherit',
  fontSize: 'inherit',
  fontStyle: 'inherit',
  fontWeight: 'inherit',
  lineHeight: 'inherit',
  '&:-webkit-autofill': {
    WebkitBackgroundClip: 'text',
    // remove autofill background
    WebkitTextFillColor: 'currentColor'
  },
  '&::-webkit-input-placeholder': {
    opacity: 'var(--Textarea-placeholderOpacity)',
    color: 'inherit'
  },
  '&::-moz-placeholder': {
    opacity: 'var(--Textarea-placeholderOpacity)',
    color: 'inherit'
  },
  // Firefox 19+
  '&:-ms-input-placeholder': {
    opacity: 'var(--Textarea-placeholderOpacity)',
    color: 'inherit'
  },
  // IE11
  '&::-ms-input-placeholder': {
    opacity: 'var(--Textarea-placeholderOpacity)',
    color: 'inherit'
  } // Edge

});
const TextareaStartDecorator = styled('div', {
  name: 'JoyTextarea',
  slot: 'StartDecorator',
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme
}) => ({
  display: 'flex',
  marginInlineStart: 'calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))',
  marginInlineEnd: 'var(--Textarea-paddingBlock)',
  marginBlockEnd: 'var(--Textarea-gap)',
  color: theme.vars.palette.text.tertiary,
  cursor: 'initial'
}));
const TextareaEndDecorator = styled('div', {
  name: 'JoyTextarea',
  slot: 'EndDecorator',
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme
}) => ({
  display: 'flex',
  marginInlineStart: 'calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))',
  marginInlineEnd: 'var(--Textarea-paddingBlock)',
  marginBlockStart: 'var(--Textarea-gap)',
  color: theme.vars.palette.text.tertiary,
  cursor: 'initial'
}));
const Textarea = /*#__PURE__*/React.forwardRef(function Textarea(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$error, _ref3, _inProps$size, _ref4, _inProps$color;

  const props = useThemeProps({
    props: inProps,
    name: 'JoyTextarea'
  });

  const _useForwardedInput = useForwardedInput(props, textareaClasses),
        {
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    component,
    componentsProps = {},
    formControl,
    focused,
    error: errorProp = false,
    disabled: disabledProp = false,
    size: sizeProp = 'md',
    color: colorProp = 'neutral',
    variant = 'outlined',
    startDecorator,
    endDecorator,
    minRows,
    maxRows
  } = _useForwardedInput,
        other = _objectWithoutPropertiesLoose(_useForwardedInput, _excluded);

  if (process.env.NODE_ENV !== 'production') {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect; // eslint-disable-next-line react-hooks/rules-of-hooks

    React.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }

      return undefined;
    }, [registerEffect]);
  }

  const disabled = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledProp;
  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const color = error ? 'danger' : (_ref4 = (_inProps$color = inProps.color) != null ? _inProps$color : formControl == null ? void 0 : formControl.color) != null ? _ref4 : colorProp;

  const ownerState = _extends({}, props, {
    color,
    disabled,
    error,
    focused,
    size,
    variant
  });

  const classes = useUtilityClasses(ownerState);
  const rootProps = useSlotProps({
    elementType: TextareaRoot,
    getSlotProps: getRootProps,
    externalSlotProps: componentsProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: [classes.root, rootStateClasses]
  });
  const textareaProps = useSlotProps({
    elementType: TextareaInput,
    getSlotProps: otherHandlers => getInputProps(_extends({}, otherHandlers, propsToForward)),
    externalSlotProps: _extends({
      minRows,
      maxRows
    }, componentsProps.textarea),
    additionalProps: {
      id: formControl == null ? void 0 : formControl.htmlFor,
      'aria-describedby': formControl == null ? void 0 : formControl['aria-describedby']
    },
    ownerState,
    className: [classes.textarea, inputStateClasses]
  });
  return /*#__PURE__*/_jsxs(TextareaRoot, _extends({}, rootProps, {
    children: [startDecorator && /*#__PURE__*/_jsx(TextareaStartDecorator, {
      className: classes.startDecorator,
      ownerState: ownerState,
      children: startDecorator
    }), /*#__PURE__*/_jsx(TextareaInput, _extends({}, textareaProps)), endDecorator && /*#__PURE__*/_jsx(TextareaEndDecorator, {
      className: classes.endDecorator,
      ownerState: ownerState,
      children: endDecorator
    })]
  }));
});
process.env.NODE_ENV !== "production" ? Textarea.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  children: PropTypes.node,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),

  /**
   * The props used for each slot inside the component.
   * @default {}
   */
  componentsProps: PropTypes.shape({
    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    textarea: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
  }),

  /**
   * @ignore
   */
  disabled: PropTypes.bool,

  /**
   * Trailing adornment for this input.
   */
  endDecorator: PropTypes.node,

  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: PropTypes.bool,

  /**
   * Maximum number of rows to display.
   */
  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * The size of the component.
   * @default 'md'
   */
  size: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),

  /**
   * Leading adornment for this input.
   */
  startDecorator: PropTypes.node,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),

  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])
} : void 0;
export default Textarea;