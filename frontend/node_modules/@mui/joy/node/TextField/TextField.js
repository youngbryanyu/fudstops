"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _utils = require("@mui/utils");

var _composeClasses = _interopRequireDefault(require("@mui/base/composeClasses"));

var _FormLabel = _interopRequireDefault(require("../FormLabel"));

var _FormHelperText = _interopRequireDefault(require("../FormHelperText"));

var _Input = _interopRequireDefault(require("../Input"));

var _styles = require("../styles");

var _textFieldClasses = _interopRequireWildcard(require("./textFieldClasses"));

var _jsxRuntime = require("react/jsx-runtime");

const _excluded = ["children", "className", "component", "components", "componentsProps", "label", "helperText", "id", "autoComplete", "autoFocus", "placeholder", "defaultValue", "value", "name", "onBlur", "onChange", "onFocus", "color", "disabled", "error", "required", "size", "variant", "fullWidth", "type", "startDecorator", "endDecorator"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const useUtilityClasses = ownerState => {
  const {
    error,
    disabled,
    variant,
    size,
    color,
    fullWidth
  } = ownerState;
  const slots = {
    root: ['root', error && 'error', disabled && 'disabled', fullWidth && 'fullWidth', variant && `variant${(0, _utils.unstable_capitalize)(variant)}`, size && `size${(0, _utils.unstable_capitalize)(size)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`]
  };
  return (0, _composeClasses.default)(slots, _textFieldClasses.getTextFieldUtilityClass, {});
};

const TextFieldRoot = (0, _styles.styled)('div', {
  name: 'JoyTextField',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette, _theme$vars$palette2, _theme$vars$palette3;

  return (0, _extends2.default)({
    '--FormLabel-margin': '0 0 0.25rem 0',
    '--FormHelperText-margin': '0.25rem 0 0 0',
    '--FormLabel-asterisk-color': theme.vars.palette.danger[500],
    '--FormHelperText-color': (_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, ownerState.size === 'sm' && {
    '--FormHelperText-fontSize': theme.vars.fontSize.xs,
    '--FormLabel-fontSize': theme.vars.fontSize.xs
  }, {
    [`&.${_textFieldClasses.default.error}`]: {
      '--FormHelperText-color': theme.vars.palette.danger[500]
    },
    [`&.${_textFieldClasses.default.disabled}`]: {
      '--FormLabel-color': (_theme$vars$palette2 = theme.vars.palette[ownerState.color || 'neutral']) == null ? void 0 : _theme$vars$palette2.plainDisabledColor,
      '--FormHelperText-color': (_theme$vars$palette3 = theme.vars.palette[ownerState.color || 'neutral']) == null ? void 0 : _theme$vars$palette3.plainDisabledColor
    },
    display: 'flex',
    flexDirection: 'column'
  }, ownerState.fullWidth && {
    width: '100%'
  });
});
const TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoyTextField'
  });
  const {
    className,
    component,
    components = {},
    componentsProps = {},
    label,
    helperText,
    id: idOverride,
    autoComplete,
    autoFocus,
    placeholder,
    defaultValue,
    value,
    name,
    onBlur,
    onChange,
    onFocus,
    color,
    disabled = false,
    error = false,
    required = false,
    size = 'md',
    variant = 'outlined',
    fullWidth = false,
    type = 'text',
    startDecorator,
    endDecorator
  } = props,
        other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const id = (0, _utils.unstable_useId)(idOverride);
  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
  const formLabelId = label && id ? `${id}-label` : undefined;
  const ownerState = (0, _extends2.default)({
    label,
    helperText,
    startDecorator,
    endDecorator,
    disabled,
    error,
    required,
    size,
    variant,
    fullWidth,
    type
  }, props);
  const classes = useUtilityClasses(ownerState);
  const Input = components.Input || _Input.default;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(TextFieldRoot, (0, _extends2.default)({
    ref: ref,
    as: component,
    className: (0, _clsx.default)(classes.root, className),
    ownerState: ownerState
  }, other, {
    children: [label && /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormLabel.default, (0, _extends2.default)({
      htmlFor: id,
      id: formLabelId,
      required: required
    }, componentsProps.label, components.Label && {
      component: components.Label
    }, {
      children: label
    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({}, componentsProps.input, {
      id: id,
      name: name,
      type: type,
      "aria-describedby": helperTextId,
      autoComplete: autoComplete,
      autoFocus: autoFocus,
      placeholder: placeholder,
      disabled: disabled,
      error: error,
      required: required,
      color: color,
      size: size,
      fullWidth: fullWidth,
      variant: variant,
      defaultValue: defaultValue,
      value: value,
      onChange: onChange,
      onBlur: onBlur,
      onFocus: onFocus,
      startDecorator: startDecorator,
      endDecorator: endDecorator
    })), helperText && /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormHelperText.default, (0, _extends2.default)({
      id: helperTextId
    }, componentsProps.helperText, components.HelperText && {
      component: components.HelperText
    }, {
      children: helperText
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? TextField.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  autoComplete: _propTypes.default.string,

  /**
   * @ignore
   */
  autoFocus: _propTypes.default.bool,

  /**
   * @ignore
   */
  children: _propTypes.default.node,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,

  /**
   * @ignore
   */
  components: _propTypes.default.shape({
    HelperText: _propTypes.default.elementType,
    Input: _propTypes.default.elementType,
    Label: _propTypes.default.elementType,
    Root: _propTypes.default.elementType
  }),

  /**
   * @ignore
   */
  componentsProps: _propTypes.default.shape({
    helperText: _propTypes.default.object,
    input: _propTypes.default.object,
    label: _propTypes.default.object,
    root: _propTypes.default.object
  }),

  /**
   * @ignore
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.number, _propTypes.default.string]),

  /**
   * @ignore
   */
  disabled: _propTypes.default.bool,

  /**
   * Trailing adornment for this input.
   */
  endDecorator: _propTypes.default.node,

  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: _propTypes.default.bool,

  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: _propTypes.default.bool,

  /**
   * The helper text content.
   */
  helperText: _propTypes.default.node,

  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: _propTypes.default.string,

  /**
   * The label content.
   */
  label: _propTypes.default.node,

  /**
   * Name attribute of the `input` element.
   */
  name: _propTypes.default.string,

  /**
   * @ignore
   */
  onBlur: _propTypes.default.func,

  /**
   * @ignore
   */
  onChange: _propTypes.default.func,

  /**
   * @ignore
   */
  onFocus: _propTypes.default.func,

  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: _propTypes.default.string,

  /**
   * @ignore
   */
  required: _propTypes.default.bool,

  /**
   * The size of the component.
   * @default 'md'
   */
  size: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['sm', 'md', 'lg']), _propTypes.default.string]),

  /**
   * Leading adornment for this input.
   */
  startDecorator: _propTypes.default.node,

  /**
   * @ignore
   */
  type: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOf(['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']),

  /**
   * @ignore
   */
  value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.number, _propTypes.default.string]),

  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['outlined', 'plain', 'soft', 'solid']), _propTypes.default.string])
} : void 0;
var _default = TextField;
exports.default = _default;