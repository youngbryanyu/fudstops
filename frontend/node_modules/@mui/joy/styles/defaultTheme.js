import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["colorSchemes", "focus", "fontFamily", "fontSize", "fontWeight", "letterSpacing", "lineHeight", "radius", "shadow", "palette"],
      _excluded2 = ["mode", "colorScheme"];
import { deepmerge } from '@mui/utils';
import extendTheme from './extendTheme';
import { createVariant, createSoftInversion, createSolidInversion } from './variantUtils';
export const getThemeWithVars = themeInput => {
  const _extendTheme = extendTheme(themeInput),
        {
    colorSchemes,
    focus,
    fontFamily,
    fontSize,
    fontWeight,
    letterSpacing,
    lineHeight,
    radius,
    shadow,
    palette: paletteInput
  } = _extendTheme,
        restTheme = _objectWithoutPropertiesLoose(_extendTheme, _excluded);

  const colorSchemePalette = deepmerge(colorSchemes[(paletteInput == null ? void 0 : paletteInput.colorScheme) || 'light'].palette, paletteInput);

  const _ref = colorSchemePalette,
        {
    mode = 'light',
    colorScheme = 'light'
  } = _ref,
        palette = _objectWithoutPropertiesLoose(_ref, _excluded2);

  return _extends({
    focus,
    fontFamily,
    fontSize,
    fontWeight,
    letterSpacing,
    lineHeight,
    radius,
    shadow
  }, restTheme, {
    colorSchemes: _extends({}, colorSchemes, {
      [colorScheme]: palette
    }),
    palette: _extends({}, palette, {
      mode,
      colorScheme
    }),
    vars: {
      focus,
      fontFamily,
      fontSize,
      fontWeight,
      letterSpacing,
      lineHeight,
      radius,
      shadow,
      palette
    },
    getColorSchemeSelector: () => '&'
  });
};
const defaultTheme = getThemeWithVars();
defaultTheme.variants = deepmerge({
  plain: createVariant('plain', defaultTheme),
  plainHover: createVariant('plainHover', defaultTheme),
  plainActive: createVariant('plainActive', defaultTheme),
  plainDisabled: createVariant('plainDisabled', defaultTheme),
  outlined: createVariant('outlined', defaultTheme),
  outlinedHover: createVariant('outlinedHover', defaultTheme),
  outlinedActive: createVariant('outlinedActive', defaultTheme),
  outlinedDisabled: createVariant('outlinedDisabled', defaultTheme),
  soft: createVariant('soft', defaultTheme),
  softHover: createVariant('softHover', defaultTheme),
  softActive: createVariant('softActive', defaultTheme),
  softDisabled: createVariant('softDisabled', defaultTheme),
  solid: createVariant('solid', defaultTheme),
  solidHover: createVariant('solidHover', defaultTheme),
  solidActive: createVariant('solidActive', defaultTheme),
  solidDisabled: createVariant('solidDisabled', defaultTheme)
}, defaultTheme.variants);
defaultTheme.colorInversion = deepmerge({
  soft: createSoftInversion(defaultTheme),
  solid: createSolidInversion(defaultTheme)
}, defaultTheme.colorInversion);
export default defaultTheme;