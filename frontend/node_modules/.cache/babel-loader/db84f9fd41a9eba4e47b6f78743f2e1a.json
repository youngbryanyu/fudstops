{"ast":null,"code":"var _jsxFileName = \"/Users/ybyu/Documents/CS307/src/fudstops/frontend/src/components/list/List.jsx\",\n    _s = $RefreshSig$();\n\n// List.jsx - javascript for movie list\nimport { ArrowBackIosOutlined, ArrowForwardIosOutlined } from \"@material-ui/icons\";\nimport { useRef, useState } from \"react\";\nimport ListItem from \"../listItem/ListItem\";\nimport \"./list.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function List({\n  list\n}) {\n  _s();\n\n  // const [isMoved, setIsMoved] = useState(false);\n  const [slideNumber, setSlideNumber] = useState(0);\n  const listRef = useRef(); // for referencing the list of movies container\n\n  const handleClick = direction => {\n    // for handling clicking on arrows (scrolling)\n    // setIsMoved(true);\n    let distance = listRef.current.getBoundingClientRect().x - 50; // gets current x-distance from left border (-50 because of left margin)\n\n    if (direction === \"left\" && slideNumber > 0) {\n      // TODO: fix clicking on arrows mid scroll\n      setSlideNumber(slideNumber - 1);\n      listRef.current.style.transform = `translateX(${230 + distance}px)`; // scroll left\n    }\n\n    if (direction === \"right\" && slideNumber < 5) {\n      // TODO: adjust slide number value for different sized screens\n      setSlideNumber(slideNumber + 1);\n      listRef.current.style.transform = `translateX(${-230 + distance}px)`; // scroll right\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"listTitle\",\n      children: list.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(ArrowBackIosOutlined, {\n        className: \"sliderArrow left\",\n        onClick: () => handleClick(\"left\") // style={{display: !isMoved && \"none\"}} // left arrow doesn't appear until scrolled\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        ref: listRef,\n        children: [\" \", list.content.map((item, i) =>\n        /*#__PURE__*/\n        // item is _id \n        _jsxDEV(ListItem, {\n          index: i,\n          item: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this) // map each item in the list and its index to a list item component\n        )]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosOutlined, {\n        className: \"sliderArrow right\",\n        onClick: () => handleClick(\"right\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_s(List, \"PeXs/dWNciSpBYjSNfUzSbCrEUY=\");\n\n_c = List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/ybyu/Documents/CS307/src/fudstops/frontend/src/components/list/List.jsx"],"names":["ArrowBackIosOutlined","ArrowForwardIosOutlined","useRef","useState","ListItem","List","list","slideNumber","setSlideNumber","listRef","handleClick","direction","distance","current","getBoundingClientRect","x","style","transform","title","content","map","item","i"],"mappings":";;;AAAA;AACA,SAASA,oBAAT,EAA+BC,uBAA/B,QAA8D,oBAA9D;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,aAAP;;AAEA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAwB;AAAA;;AACnC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,CAAD,CAA9C;AAEA,QAAMM,OAAO,GAAGP,MAAM,EAAtB,CAJmC,CAIV;;AAEzB,QAAMQ,WAAW,GAAIC,SAAD,IAAe;AAAE;AACjC;AACA,QAAIC,QAAQ,GAAGH,OAAO,CAACI,OAAR,CAAgBC,qBAAhB,GAAwCC,CAAxC,GAA4C,EAA3D,CAF+B,CAE+B;;AAC9D,QAAIJ,SAAS,KAAK,MAAd,IAAwBJ,WAAW,GAAG,CAA1C,EAA6C;AAAE;AAC3CC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACAE,MAAAA,OAAO,CAACI,OAAR,CAAgBG,KAAhB,CAAsBC,SAAtB,GAAmC,cAAa,MAAML,QAAS,KAA/D,CAFyC,CAE4B;AACxE;;AACD,QAAID,SAAS,KAAK,OAAd,IAAyBJ,WAAW,GAAG,CAA3C,EAA8C;AAAE;AAC5CC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACAE,MAAAA,OAAO,CAACI,OAAR,CAAgBG,KAAhB,CAAsBC,SAAtB,GAAmC,cAAa,CAAC,GAAD,GAAOL,QAAS,KAAhE,CAF0C,CAE4B;AACzE;AACJ,GAXD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA,gBAA6BN,IAAI,CAACY;AAAlC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI,QAAC,oBAAD;AACI,QAAA,SAAS,EAAC,kBADd;AAEI,QAAA,OAAO,EAAE,MAAIR,WAAW,CAAC,MAAD,CAF5B,CAGI;;AAHJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,GAAG,EAAED,OAAhC;AAAA,wBACKH,IAAI,CAACa,OAAL,CAAaC,GAAb,CAAiB,CAACC,IAAD,EAAOC,CAAP;AAAA;AAAe;AAC7B,gBAAC,QAAD;AAAU,UAAA,KAAK,EAAEA,CAAjB;AAAoB,UAAA,IAAI,EAAED;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADc,CACqB;AADtC,SADL;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAWI,QAAC,uBAAD;AAAyB,QAAA,SAAS,EAAC,mBAAnC;AAAuD,QAAA,OAAO,EAAE,MAAIX,WAAW,CAAC,OAAD;AAA/E;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GApCuBL,I;;KAAAA,I","sourcesContent":["// List.jsx - javascript for movie list\nimport { ArrowBackIosOutlined, ArrowForwardIosOutlined } from \"@material-ui/icons\"\nimport { useRef, useState } from \"react\"\nimport ListItem from \"../listItem/ListItem\"\nimport \"./list.scss\"\n\nexport default function List({ list }) {\n    // const [isMoved, setIsMoved] = useState(false);\n    const [slideNumber, setSlideNumber] = useState(0);\n\n    const listRef = useRef() // for referencing the list of movies container\n\n    const handleClick = (direction) => { // for handling clicking on arrows (scrolling)\n        // setIsMoved(true);\n        let distance = listRef.current.getBoundingClientRect().x - 50 // gets current x-distance from left border (-50 because of left margin)\n        if (direction === \"left\" && slideNumber > 0) { // TODO: fix clicking on arrows mid scroll\n            setSlideNumber(slideNumber - 1);\n            listRef.current.style.transform = `translateX(${230 + distance}px)`; // scroll left\n        }\n        if (direction === \"right\" && slideNumber < 5) { // TODO: adjust slide number value for different sized screens\n            setSlideNumber(slideNumber + 1);\n            listRef.current.style.transform = `translateX(${-230 + distance}px)`; // scroll right\n        }\n    }\n    return (\n        <div className=\"list\">\n            <span className=\"listTitle\">{list.title}</span>\n            <div className=\"wrapper\">\n                <ArrowBackIosOutlined \n                    className=\"sliderArrow left\" \n                    onClick={()=>handleClick(\"left\")}\n                    // style={{display: !isMoved && \"none\"}} // left arrow doesn't appear until scrolled\n                />\n                <div className=\"container\" ref={listRef}> {/* list of movies container*/}\n                    {list.content.map((item, i) => ( // item is _id \n                        <ListItem index={i} item={item} /> // map each item in the list and its index to a list item component\n                    ))}\n                </div>\n                <ArrowForwardIosOutlined className=\"sliderArrow right\" onClick={()=>handleClick(\"right\")}/>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}